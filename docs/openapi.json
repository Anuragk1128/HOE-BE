{
  "openapi": "3.0.3",
  "info": {
    "title": "House of Evolve API",
    "version": "1.0.0",
    "description": "Multi-brand catalog API for IRA and Jerseymise, plus combined catalog for HOE."
  },
  "servers": [
    { "url": "https://hoe-be.onrender.com", "description": "Production server" },
    { "url": "http://localhost:{port}", "variables": { "port": { "default": "4000" } }, "description": "Local development server" }
  ],
  "paths": {
    "/api/products": {
      "get": {
        "summary": "Get all active products",
        "description": "Retrieve a list of all active products with populated brand, category, subcategory, and vendor data",
        "tags": ["Products"],
        "responses": {
          "200": {
            "description": "List of all active products with populated data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    },
                    "count": { "type": "integer", "example": 10 }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "summary": "Get a single product by ID",
        "description": "Retrieve details of a specific product using its unique ID with populated brand, category, subcategory, and vendor data",
        "tags": ["Products"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the product to retrieve",
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product details with populated data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": { "$ref": "#/components/schemas/Product" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid product ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/all-products": {
      "get": {
        "summary": "Get all active products",
        "description": "Retrieve a list of all active products without any filtering",
        "tags": ["Catalog"],
        "responses": {
          "200": {
            "description": "List of all active products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    },
                    "count": { "type": "integer", "example": 10 }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/products/{id}": {
      "get": {
        "summary": "Get a single product by ID",
        "description": "Retrieve details of a specific product using its unique ID",
        "tags": ["Catalog"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the product to retrieve",
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": { "$ref": "#/components/schemas/Product" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid product ID format"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "type": "object", "properties": { "status": { "type": "string" } } } } }
          }
        }
      }
    },
    "/api/auth/admin/login": {
      "post": {
        "summary": "Admin login (token only)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Logged in", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TokenOnly" } } } },
          "401": { "description": "Invalid credentials" }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "summary": "Register a customer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password"],
                "properties": {
                  "name": { "type": "string" },
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Registered", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuthResponse" } } } },
          "409": { "description": "Email already in use" }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Customer login (token + user)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Logged in (customers only)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuthResponse" } } } },
          "401": { "description": "Invalid credentials" },
          "403": { "description": "Forbidden for admins and vendors" }
        }
      }
    },
    "/api/auth/vendor/login": {
      "post": {
        "summary": "Vendor login (token only)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Logged in", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TokenOnly" } } } },
          "401": { "description": "Invalid credentials" }
        }
      }
    },
    "/api/auth/vendor/register": {
      "post": {
        "summary": "Register a vendor (user + vendor profile)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password", "displayName"],
                "properties": {
                  "name": { "type": "string" },
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" },
                  "displayName": { "type": "string" },
                  "businessName": { "type": "string" },
                  "phone": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Vendor created (pending)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VendorAuthResponse" } } } },
          "409": { "description": "Email already in use" }
        }
      }
    },
    "/api/auth/admin/create": {
      "post": {
        "summary": "Create an admin user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password"],
                "properties": {
                  "name": { "type": "string" },
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Admin created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuthResponse" } } } },
          "409": { "description": "Email already in use" }
        }
      }
    },
    "/api/brands": {
      "get": {
        "summary": "List active brands",
        "responses": {
          "200": { "description": "List of brands" }
        }
      }
    },
    "/api/brands/{brandSlug}/categories": {
      "get": {
        "summary": "List categories for a brand",
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "ira" } }
        ],
        "responses": { "200": { "description": "List of categories" }, "404": { "description": "Brand not found" } }
      }
    },
    "/api/brands/{brandSlug}/categories/{categorySlug}/subcategories": {
      "get": {
        "summary": "List subcategories for a category in a brand",
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "ira" } },
          { "name": "categorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "necklaces" } }
        ],
        "responses": { "200": { "description": "List of subcategories" }, "404": { "description": "Not found" } }
      }
    },
    "/api/brands/{brandSlug}/products": {
      "get": {
        "summary": "List products for a brand",
        "description": "Retrieve products for a specific brand with populated category and subcategory data. Supports filtering, searching, and pagination.",
        "tags": ["Brands", "Products"],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "category", "in": "query", "schema": { "type": "string", "description": "Filter by category slug" } },
          { "name": "subcategory", "in": "query", "schema": { "type": "string", "description": "Filter by subcategory slug" } },
          { "name": "q", "in": "query", "schema": { "type": "string", "description": "Search query for title, description, or tags" } },
          { "name": "min", "in": "query", "schema": { "type": "number", "description": "Minimum price filter" } },
          { "name": "max", "in": "query", "schema": { "type": "number", "description": "Maximum price filter" } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1, "description": "Page number for pagination" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20, "description": "Number of items per page" } }
        ],
        "responses": { 
          "200": { 
            "description": "Paginated products with populated data", 
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    },
                    "pagination": { "$ref": "#/components/schemas/Pagination" }
                  }
                }
              }
            }
          }, 
          "404": { "description": "Brand not found" } 
        }
      }
    },
    "/api/brands/{brandSlug}/products/all": {
      "get": {
        "summary": "Get all products for a brand (public)",
        "description": "Returns all products for a specific brand with populated category and subcategory data. Matches admin endpoint response format.",
        "tags": ["Brands", "Products"],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } }
        ],
        "responses": {
          "200": {
            "description": "List of all products for the brand",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    }
                  }
                }
              }
            }
          },
          "404": { "description": "Brand not found" }
        }
      }
    },
    "/api/brands/{brandSlug}/categories/{categorySlug}/products": {
      "get": {
        "summary": "List products for a brand category",
        "description": "Retrieve products for a specific brand and category with populated subcategory data.",
        "tags": ["Brands", "Products"],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "categorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "shirts" } }
        ],
        "responses": { 
          "200": { 
            "description": "Products for the specified brand and category with populated data", 
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    }
                  }
                }
              }
            }
          }, 
          "404": { "description": "Brand or category not found" } 
        }
      }
    },
    "/api/brands/{brandSlug}/categories/{categorySlug}/subcategories/{subcategorySlug}/products": {
      "get": {
        "summary": "List products for a brand subcategory",
        "description": "Retrieve products for a specific brand, category, and subcategory with populated data.",
        "tags": ["Brands", "Products"],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "categorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "shirts" } },
          { "name": "subcategorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "polo" } }
        ],
        "responses": { 
          "200": { 
            "description": "Products for the specified brand, category, and subcategory with populated data", 
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    }
                  }
                }
              }
            }
          }, 
          "404": { "description": "Brand, category, or subcategory not found" } 
        }
      }
    },
    "/api/catalog/products/ids": {
      "get": {
        "summary": "Get products by their IDs",
        "description": "Retrieve multiple products by providing their IDs as a comma-separated list",
        "tags": ["Catalog"],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "description": "Comma-separated list of product IDs",
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011,507f1f77bcf86cd799439012"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of products matching the provided IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    },
                    "count": { "type": "integer", "example": 2 }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request - missing or invalid product IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/products": {
      "get": {
        "summary": "List products across all brands",
        "parameters": [
          { "name": "brand", "in": "query", "schema": { "type": "string", "example": "ira" } },
          { "name": "category", "in": "query", "schema": { "type": "string" } },
          { "name": "subcategory", "in": "query", "schema": { "type": "string" } },
          { "name": "q", "in": "query", "schema": { "type": "string" } },
          { "name": "min", "in": "query", "schema": { "type": "number" } },
          { "name": "max", "in": "query", "schema": { "type": "number" } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20 } }
        ],
        "responses": { "200": { "description": "Paginated products" } }
      }
    },
    "/api/catalog/product/{idOrSlug}": {
      "get": {
        "summary": "Get a product by Mongo ID or slug",
        "parameters": [
          { "name": "idOrSlug", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": { "200": { "description": "Product detail" }, "404": { "description": "Not found" } }
      }
    },
    "/api/admin/brands": {
      "post": {
        "summary": "Create a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "description": { "type": "string" },
                  "active": { "type": "boolean" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Brand" } } } },
          "409": { "description": "Slug already exists" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{id}": {
      "patch": {
        "summary": "Update a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "description": { "type": "string" },
                  "active": { "type": "boolean" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Brand" } } } },
          "404": { "description": "Brand not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "summary": "Delete a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "204": { "description": "No Content" },
          "404": { "description": "Brand not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories": {
      "post": {
        "summary": "Create category for a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "image": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Category" } } } },
          "404": { "description": "Brand not found" },
          "409": { "description": "Slug already exists for this brand" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories/{id}": {
      "patch": {
        "summary": "Update category for a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "image": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Category" } } } },
          "404": { "description": "Brand or Category not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "summary": "Delete category for a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "204": { "description": "No Content" },
          "404": { "description": "Brand or Category not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories/{categoryId}/subcategories": {
      "post": {
        "summary": "Create subcategory for a category (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "image": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Subcategory" } } } },
          "404": { "description": "Brand or Category not found" },
          "409": { "description": "Slug already exists for this category" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories/{categoryId}/subcategories/{id}": {
      "patch": {
        "summary": "Update subcategory for a category (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "image": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Subcategory" } } } },
          "404": { "description": "Brand/Category/Subcategory not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "summary": "Delete subcategory for a category (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "204": { "description": "No Content" },
          "404": { "description": "Brand/Category/Subcategory not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories/{categoryId}/subcategories/{subcategoryId}/products": {
      "post": {
        "summary": "Create product (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "subcategoryId", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "price"],
                "properties": {
                  "title": { "type": "string" },
                  "slug": { "type": "string" },
                  "description": { "type": "string" },
                  "images": { "type": "array", "items": { "type": "string" } },
                  "price": { "type": "number" },
                  "compareAtPrice": { "type": "number" },
                  "attributes": { "type": "object", "additionalProperties": true },
                  "stock": { "type": "number" },
                  "status": { "type": "string", "enum": ["active", "draft", "pending_approval"] },
                  "vendorId": { "type": "string" },
                  "tags": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } } },
          "404": { "description": "Brand/Category/Subcategory not found" },
          "409": { "description": "Slug already exists for this brand" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories/{categoryId}/subcategories/{subcategoryId}/products/{id}": {
      "patch": {
        "summary": "Update product (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "subcategoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "slug": { "type": "string" },
                  "description": { "type": "string" },
                  "images": { "type": "array", "items": { "type": "string" } },
                  "price": { "type": "number" },
                  "compareAtPrice": { "type": "number" },
                  "attributes": { "type": "object", "additionalProperties": true },
                  "stock": { "type": "number" },
                  "status": { "type": "string", "enum": ["active", "draft", "pending_approval"] },
                  "tags": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } } },
          "404": { "description": "Brand/Category/Subcategory/Product not found" },
          "409": { "description": "Slug already exists for this brand" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "summary": "Delete product (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "subcategoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "204": { "description": "No Content" },
          "404": { "description": "Brand/Category/Subcategory/Product not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandSlug}/products": {
      "get": {
        "summary": "List products for a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } }
        ],
        "responses": { 
          "200": { "description": "Products for the specified brand with populated category and subcategory" }, 
          "404": { "description": "Brand not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandSlug}/categories/{categorySlug}/products": {
      "get": {
        "summary": "List products for a brand category (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "categorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "shirts" } }
        ],
        "responses": { 
          "200": { "description": "Products for the specified brand and category with populated subcategory" }, 
          "404": { "description": "Brand or category not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandSlug}/categories/{categorySlug}/subcategories/{subcategorySlug}/products": {
      "get": {
        "summary": "List products for a brand subcategory (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "categorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "shirts" } },
          { "name": "subcategorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "polo" } }
        ],
        "responses": { 
          "200": { "description": "Products for the specified brand, category, and subcategory" }, 
          "404": { "description": "Brand, category, or subcategory not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/products": {
      "get": {
        "summary": "List all products across all brands (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brand", "in": "query", "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "category", "in": "query", "schema": { "type": "string" } },
          { "name": "subcategory", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": { 
          "200": { "description": "Products with populated brand, category, subcategory, and vendor" }, 
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/vendors": {
      "get": {
        "summary": "List all vendors (admin) - simple version",
        "description": "Get a simple list of all vendors with basic information (no pagination or filters)",
        "security": [{ "bearerAuth": [] }],
        "responses": { 
          "200": { "description": "Simple list of vendors with basic data" }, 
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/vendors/detailed": {
      "get": {
        "summary": "List all vendors (admin) - detailed version",
        "description": "Get a detailed, paginated list of vendors with filters and full information",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "status", "in": "query", "schema": { "type": "string", "enum": ["pending", "approved", "suspended"] } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20 } }
        ],
        "responses": { 
          "200": { "description": "Paginated list of vendors with populated user data" }, 
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/vendors/{id}": {
      "get": {
        "summary": "Get vendor details by ID (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": { 
          "200": { "description": "Vendor details with populated user data" }, 
          "404": { "description": "Vendor not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "patch": {
        "summary": "Update vendor (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": { "type": "string", "enum": ["pending", "approved", "suspended"] },
                  "displayName": { "type": "string" },
                  "businessName": { "type": "string" },
                  "phone": { "type": "string" },
                  "gstNumber": { "type": "string" },
                  "address": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": { 
          "200": { "description": "Vendor updated successfully" }, 
          "400": { "description": "Invalid status value or no fields to update" },
          "404": { "description": "Vendor not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/reviews": {
      "post": {
        "summary": "Create a new review",
        "description": "Submit a new review for a product. Requires authentication.",
        "tags": ["Reviews"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["product", "rating", "comment"],
                "properties": {
                  "product": {
                    "type": "string",
                    "format": "objectId",
                    "description": "ID of the product being reviewed",
                    "example": "507f1f77bcf86cd799439011"
                  },
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "description": "Rating from 1 to 5 stars"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Review comment (max 1000 characters)",
                    "maxLength": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or user has already reviewed this product"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reviews/product/{productId}": {
      "get": {
        "summary": "Get all reviews for a product",
        "description": "Retrieve all approved reviews for a specific product",
        "tags": ["Reviews"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "ID of the product to get reviews for",
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reviews for the product",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Review"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "summary": "Create a review by productId",
        "description": "Submit a new review for a product using productId in the path.",
        "tags": ["Reviews"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "ID of the product to review",
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["rating", "comment"],
                "properties": {
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "description": "Rating from 1 to 5 stars"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Review comment (max 1000 characters)",
                    "maxLength": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or user has already reviewed this product"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reviews/{id}": {
      "get": {
        "summary": "Get review by ID",
        "description": "Retrieve a specific review by its ID",
        "tags": ["Reviews"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the review to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/wishlist": {
      "get": {
        "summary": "List current user's wishlist",
        "description": "Returns all wishlist items for the authenticated user (most recent first)",
        "tags": ["Wishlist"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Array of wishlist items",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WishlistItem" } }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "summary": "Add product to wishlist",
        "description": "Add a product to the authenticated user's wishlist.",
        "tags": ["Wishlist"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["product"],
                "properties": {
                  "product": { "type": "string", "description": "Product ID (Mongo ObjectId)", "example": "507f1f77bcf86cd799439011" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Added to wishlist" },
          "200": { "description": "Already in wishlist (idempotent)" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Product not found" }
        }
      }
    },
    "/api/wishlist/{productId}": {
      "post": {
        "summary": "Add product to wishlist (by path)",
        "description": "Add a product to the authenticated user's wishlist by providing the product ID in the URL path.",
        "tags": ["Wishlist"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product ID (Mongo ObjectId)",
            "schema": { "type": "string", "format": "objectId", "example": "507f1f77bcf86cd799439011" }
          }
        ],
        "responses": {
          "201": { "description": "Added to wishlist", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WishlistItem" } } } },
          "200": { "description": "Already in wishlist (idempotent)", "content": { "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" }, "item": { "$ref": "#/components/schemas/WishlistItem" } } } } } },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Product not found" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Product": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "description": "Unique product identifier" },
          "brandId": { "$ref": "#/components/schemas/PopulatedBrand" },
          "categoryId": { "$ref": "#/components/schemas/PopulatedCategory" },
          "subcategoryId": { "$ref": "#/components/schemas/PopulatedSubcategory" },
          "title": { "type": "string" },
          "slug": { "type": "string" },
          "description": { "type": "string" },
          "images": { "type": "array", "items": { "type": "string" } },
          "price": { "type": "number" },
          "compareAtPrice": { "type": "number" },
          "attributes": { "type": "object", "additionalProperties": true },
          "stock": { "type": "number" },
          "status": { "type": "string", "enum": ["active", "draft", "pending_approval"] },
          "vendorId": { "$ref": "#/components/schemas/PopulatedVendor" },
          "tags": { "type": "array", "items": { "type": "string" } },
          "featured": { "type": "boolean", "default": false },
          "bestseller": { "type": "boolean", "default": false },
          "newArrival": { "type": "boolean", "default": false },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      },
      "PopulatedBrand": {
        "type": "object",
        "properties": { "_id": { "type": "string" }, "name": { "type": "string" }, "slug": { "type": "string" } }
      },
      "PopulatedCategory": {
        "type": "object",
        "properties": { "_id": { "type": "string" }, "name": { "type": "string" }, "slug": { "type": "string" } }
      },
      "PopulatedSubcategory": {
        "type": "object",
        "properties": { "_id": { "type": "string" }, "name": { "type": "string" }, "slug": { "type": "string" } }
      },
      "PopulatedVendor": {
        "type": "object",
        "properties": { "_id": { "type": "string" }, "name": { "type": "string" }, "email": { "type": "string" } }
      },
      "Subcategory": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "brandId": { "type": "string" },
          "categoryId": { "type": "string" },
          "name": { "type": "string" },
          "slug": { "type": "string" },
          "image": { "type": "string" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "brandId": { "type": "string" },
          "name": { "type": "string" },
          "slug": { "type": "string" },
          "image": { "type": "string" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      },
      "Brand": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "name": { "type": "string" },
          "slug": { "type": "string" },
          "description": { "type": "string" },
          "active": { "type": "boolean" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      },
      "TokenOnly": { "type": "object", "properties": { "token": { "type": "string" } } },
      "User": {
        "type": "object",
        "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "email": { "type": "string" }, "role": { "type": "string", "enum": ["customer", "vendor", "admin"] } }
      },
      "Vendor": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "userId": { "$ref": "#/components/schemas/User" },
          "displayName": { "type": "string" },
          "businessName": { "type": "string" },
          "status": { "type": "string", "enum": ["pending", "approved", "suspended"] },
          "phone": { "type": "string" },
          "gstNumber": { "type": "string" },
          "address": { "type": "string" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      },
      "AuthResponse": { "type": "object", "properties": { "token": { "type": "string" }, "user": { "$ref": "#/components/schemas/User" } } },
      "VendorAuthResponse": { "type": "object", "properties": { "token": { "type": "string" }, "user": { "$ref": "#/components/schemas/User" }, "vendor": { "$ref": "#/components/schemas/Vendor" } } },
      "Pagination": { "type": "object", "properties": { "page": { "type": "integer" }, "pages": { "type": "integer" }, "total": { "type": "integer" } } },
      "Review": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "product": { "type": "string" },
          "user": { "type": "object", "properties": { "_id": { "type": "string" }, "name": { "type": "string" }, "email": { "type": "string" } } },
          "rating": { "type": "integer", "minimum": 1, "maximum": 5 },
          "comment": { "type": "string" },
          "status": { "type": "string", "enum": ["pending", "approved", "rejected"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "WishlistItem": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "user": { "type": "string" },
          "product": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      }
    },
    "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } }
  }
}
