{
  "openapi": "3.0.3",
  "info": {
    "title": "House of Evolve API",
    "version": "1.0.0",
    "description": "Multi-brand catalog API for IRA and Jerseymise, plus combined catalog for HOE."
  },
  "servers": [
    { "url": "https://hoe-be.onrender.com", "description": "Production server" },
    { "url": "http://localhost:{port}", "variables": { "port": { "default": "4000" } }, "description": "Local development server" }
  ],
  "paths": {
    "/api/cart": {
      "get": {
        "summary": "List current user's cart items",
        "description": "Returns all cart items for the authenticated user (most recent first)",
        "tags": ["Cart"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Array of cart items",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CartItem" } }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "summary": "Add product to cart (or increase quantity)",
        "description": "Add a product to the authenticated user's cart. If the product already exists, the quantity is increased.",
        "tags": ["Cart"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["product"],
                "properties": {
                  "product": { "type": "string", "description": "Product ID (Mongo ObjectId)", "example": "507f1f77bcf86cd799439011" },
                  "quantity": { "type": "integer", "minimum": 1, "default": 1 }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Added to cart or quantity increased", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CartItem" } } } },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Product not found" }
        }
      }
    },
    "/api/cart/{productId}": {
      "post": {
        "summary": "Add product to cart by path (quantity optional)",
        "tags": ["Cart"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product ID (Mongo ObjectId)",
            "schema": { "type": "string", "format": "objectId", "example": "507f1f77bcf86cd799439011" }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "quantity": { "type": "integer", "minimum": 1, "default": 1 } }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Added to cart or quantity increased", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CartItem" } } } },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Product not found" }
        }
      },
      "delete": {
        "summary": "Remove product from cart (entirely or by quantity)",
        "description": "Remove the specified product from the authenticated user's cart. If no quantity is specified, the entire product is removed. If a quantity is provided, only that amount is removed from the cart.",
        "tags": ["Cart"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product ID (Mongo ObjectId)",
            "schema": { "type": "string", "format": "objectId", "example": "507f1f77bcf86cd799439011" }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quantity": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Number of items to remove from cart. If not provided or if quantity >= current cart quantity, entire product is removed.",
                    "example": 2
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Partially removed from cart (quantity reduced)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Removed 2 item(s) from cart" },
                    "remainingQuantity": { "type": "integer", "example": 3 },
                    "item": { "$ref": "#/components/schemas/CartItem" }
                  }
                }
              }
            }
          },
          "204": { "description": "Completely removed from cart (No Content)" },
          "400": { "description": "Invalid quantity parameter" },
          "404": { "description": "Item not found in cart" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "summary": "Get current user's profile",
        "description": "Fetch the authenticated user's profile details for the account page.",
        "tags": ["Users"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "user": { "$ref": "#/components/schemas/User" } }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "User not found" }
        }
      },
      "patch": {
        "summary": "Update current user's profile",
        "description": "Update name, phone, and address fields for the authenticated user. Email, role, and password cannot be changed here.",
        "tags": ["Users"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "phone": { "type": "string" },
                  "address": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "user": { "$ref": "#/components/schemas/User" } }
                }
              }
            }
          },
          "400": { "description": "Validation error or no updatable fields" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/api/catalog/categories": {
      "get": {
        "summary": "Get all categories and subcategories",
        "description": "Retrieve a hierarchical list of all active brands, their categories, and subcategories. Only includes categories that have subcategories and brands that have categories.",
        "tags": ["Catalog"],
        "responses": {
          "200": {
            "description": "Hierarchical list of brands, categories, and subcategories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/BrandWithCategories" }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "summary": "Get all active products",
        "description": "Retrieve a list of all active products with populated brand, category, subcategory, and vendor data",
        "tags": ["Products"],
        "responses": {
          "200": {
            "description": "List of all active products with populated data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    },
                    "count": { "type": "integer", "example": 10 }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "summary": "Get a single product by ID",
        "description": "Retrieve details of a specific product using its unique ID with populated brand, category, subcategory, and vendor data",
        "tags": ["Products"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the product to retrieve",
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product details with populated data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": { "$ref": "#/components/schemas/Product" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid product ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/all-products": {
      "get": {
        "summary": "Get all active products",
        "description": "Retrieve a list of all active products without any filtering",
        "tags": ["Catalog"],
        "responses": {
          "200": {
            "description": "List of all active products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    },
                    "count": { "type": "integer", "example": 10 }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/products/{id}": {
      "get": {
        "summary": "Get a single product by ID",
        "description": "Retrieve details of a specific product using its unique ID",
        "tags": ["Catalog"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the product to retrieve",
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": { "$ref": "#/components/schemas/Product" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid product ID format"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "type": "object", "properties": { "status": { "type": "string" } } } } }
          }
        }
      }
    },
    "/api/health/geocoding": {
      "get": {
        "summary": "Geocoding health check",
        "description": "Checks Mapbox token configuration and returns a timestamp.",
        "tags": ["Geocoding"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "ok" },
                    "service": { "type": "string", "example": "Mapbox Geocoding" },
                    "token_configured": { "type": "boolean", "example": true },
                    "timestamp": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/geocoding/validate-address": {
      "post": {
        "summary": "Validate and geocode an address",
        "description": "Validates address fields and returns latitude/longitude using Mapbox forward geocoding.",
        "tags": ["Geocoding"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["addressLine1", "city", "state", "postalCode"],
                "properties": {
                  "addressLine1": { "type": "string", "example": "Gateway of India" },
                  "addressLine2": { "type": "string", "example": "Apollo Bandar, Colaba" },
                  "city": { "type": "string", "example": "Mumbai" },
                  "state": { "type": "string", "example": "Maharashtra" },
                  "postalCode": { "type": "string", "example": "400001" },
                  "country": { "type": "string", "example": "India" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Geocoding success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "object",
                      "properties": {
                        "latitude": { "type": "string", "example": "18.921984" },
                        "longitude": { "type": "string", "example": "72.834654" },
                        "full_address": { "type": "string" },
                        "place_formatted": { "type": "string" },
                        "isValid": { "type": "boolean", "example": true },
                        "original_input": { "$ref": "#/components/schemas/GeocodeAddressInput" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation failed or address not geocodable" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/geocoding/reverse": {
      "post": {
        "summary": "Reverse geocode coordinates",
        "description": "Returns an address for given latitude and longitude.",
        "tags": ["Geocoding"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["latitude", "longitude"],
                "properties": {
                  "latitude": { "type": "string", "example": "18.921984" },
                  "longitude": { "type": "string", "example": "72.834654" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reverse geocoding success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "object",
                      "properties": {
                        "full_address": { "type": "string" },
                        "place_formatted": { "type": "string" },
                        "coordinates": { "type": "array", "items": { "type": "string" }, "example": ["72.834654", "18.921984"] }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Missing/invalid coordinates" },
          "404": { "description": "No address found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/geocoding/test": {
      "get": {
        "summary": "Test geocoding service",
        "description": "Performs a sample forward geocoding request to verify setup.",
        "tags": ["Geocoding"],
        "responses": {
          "200": {
            "description": "Test result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "test_address": { "$ref": "#/components/schemas/GeocodeAddressInput" },
                    "result": {
                      "type": "object",
                      "nullable": true,
                      "properties": {
                        "latitude": { "type": "string" },
                        "longitude": { "type": "string" },
                        "full_address": { "type": "string" },
                        "place_formatted": { "type": "string" }
                      }
                    },
                    "token_configured": { "type": "boolean" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/admin/login": {
      "post": {
        "summary": "Admin login (token only)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Logged in", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TokenOnly" } } } },
          "401": { "description": "Invalid credentials" }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "summary": "Register a customer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password", "otp"],
                "properties": {
                  "name": { "type": "string" },
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" },
                  "otp": { "type": "string", "description": "6-digit OTP sent to email", "example": "123456" }
                }
              }
            }
          }
        },
        "description": "Register a customer with email OTP verification. First call POST /api/auth/register/send-otp to receive OTP via email, then use this endpoint to complete registration.",
        "responses": {
          "201": { "description": "Registered", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuthResponse" } } } },
          "400": { "description": "Missing fields, invalid OTP, or OTP expired" },
          "409": { "description": "Email already in use" }
        }
      }
    },
    "/api/auth/register/send-otp": {
      "post": {
        "summary": "Send OTP for registration",
        "description": "Send a 6-digit OTP to the provided email address for customer registration. The OTP expires in 10 minutes.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": { "type": "string", "format": "email", "description": "Email address to send OTP to" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OTP sent to email", "content": { "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" } } } } } },
          "400": { "description": "Missing email" },
          "409": { "description": "Email already in use" }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Customer login (token + user)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Logged in (customers only)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuthResponse" } } } },
          "401": { "description": "Invalid credentials" },
          "403": { "description": "Forbidden for admins and vendors" }
        }
      }
    },
    "/api/auth/vendor/login": {
      "post": {
        "summary": "Vendor login (token only)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Logged in", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TokenOnly" } } } },
          "401": { "description": "Invalid credentials" }
        }
      }
    },
    "/api/auth/vendor/register": {
      "post": {
        "summary": "Register a vendor (user + vendor profile)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password", "displayName"],
                "properties": {
                  "name": { "type": "string" },
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" },
                  "displayName": { "type": "string" },
                  "businessName": { "type": "string" },
                  "phone": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Vendor created (pending)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/VendorAuthResponse" } } } },
          "409": { "description": "Email already in use" }
        }
      }
    },
    "/api/auth/admin/create": {
      "post": {
        "summary": "Create an admin user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password"],
                "properties": {
                  "name": { "type": "string" },
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Admin created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuthResponse" } } } },
          "409": { "description": "Email already in use" }
        }
      }
    },
    "/api/auth/google-login": {
      "post": {
        "summary": "Login with Google OAuth (customers only)",
        "description": "Authenticate using Google OAuth token. Creates new customer account or links to existing account. Only available for customers.",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token"],
                "properties": {
                  "token": { 
                    "type": "string", 
                    "description": "Google ID token from client-side authentication",
                    "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjE2NzI4OTQ2NzI..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Successfully authenticated with Google", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "token": { "type": "string", "description": "JWT token for API authentication" },
                    "user": { 
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" },
                        "email": { "type": "string" },
                        "role": { "type": "string", "enum": ["customer"] },
                        "avatar": { "type": "string", "description": "Google profile picture URL" }
                      }
                    }
                  }
                } 
              } 
            } 
          },
          "400": { "description": "Missing or invalid Google token" },
          "401": { "description": "Google authentication failed" },
          "409": { "description": "Email already linked to different Google account" }
        }
      }
    },
    "/api/brands": {
      "get": {
        "summary": "List active brands",
        "responses": {
          "200": { "description": "List of brands" }
        }
      }
    },
    "/api/brands/{brandSlug}/categories": {
      "get": {
        "summary": "List categories for a brand",
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "ira" } }
        ],
        "responses": { "200": { "description": "List of categories" }, "404": { "description": "Brand not found" } }
      }
    },
    "/api/brands/{brandSlug}/categories/{categorySlug}/subcategories": {
      "get": {
        "summary": "List subcategories for a category in a brand",
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "ira" } },
          { "name": "categorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "necklaces" } }
        ],
        "responses": { "200": { "description": "List of subcategories" }, "404": { "description": "Not found" } }
      }
    },
    "/api/brands/{brandSlug}/products": {
      "get": {
        "summary": "List products for a brand",
        "description": "Retrieve products for a specific brand with populated category and subcategory data. Supports filtering, searching, and pagination.",
        "tags": ["Brands", "Products"],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "category", "in": "query", "schema": { "type": "string", "description": "Filter by category slug" } },
          { "name": "subcategory", "in": "query", "schema": { "type": "string", "description": "Filter by subcategory slug" } },
          { "name": "q", "in": "query", "schema": { "type": "string", "description": "Search query for title, description, or tags" } },
          { "name": "min", "in": "query", "schema": { "type": "number", "description": "Minimum price filter" } },
          { "name": "max", "in": "query", "schema": { "type": "number", "description": "Maximum price filter" } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1, "description": "Page number for pagination" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20, "description": "Number of items per page" } }
        ],
        "responses": { 
          "200": { 
            "description": "Paginated products with populated data", 
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    },
                    "pagination": { "$ref": "#/components/schemas/Pagination" }
                  }
                }
              }
            }
          }, 
          "404": { "description": "Brand not found" } 
        }
      }
    },
    "/api/brands/{brandSlug}/products/all": {
      "get": {
        "summary": "Get all products for a brand (public)",
        "description": "Returns all products for a specific brand with populated category and subcategory data. Matches admin endpoint response format.",
        "tags": ["Brands", "Products"],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } }
        ],
        "responses": {
          "200": {
            "description": "List of all products for the brand",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    }
                  }
                }
              }
            }
          },
          "404": { "description": "Brand not found" }
        }
      }
    },
    "/api/brands/{brandSlug}/categories/{categorySlug}/products": {
      "get": {
        "summary": "List products for a brand category",
        "description": "Retrieve products for a specific brand and category with populated subcategory data.",
        "tags": ["Brands", "Products"],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "categorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "shirts" } }
        ],
        "responses": { 
          "200": { 
            "description": "Products for the specified brand and category with populated data", 
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    }
                  }
                }
              }
            }
          }, 
          "404": { "description": "Brand or category not found" } 
        }
      }
    },
    "/api/brands/{brandSlug}/categories/{categorySlug}/subcategories/{subcategorySlug}/products": {
      "get": {
        "summary": "List products for a brand subcategory",
        "description": "Retrieve products for a specific brand, category, and subcategory with populated data.",
        "tags": ["Brands", "Products"],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "categorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "shirts" } },
          { "name": "subcategorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "polo" } }
        ],
        "responses": { 
          "200": { 
            "description": "Products for the specified brand, category, and subcategory with populated data", 
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    }
                  }
                }
              }
            }
          }, 
          "404": { "description": "Brand, category, or subcategory not found" } 
        }
      }
    },
    "/api/catalog/products/ids": {
      "get": {
        "summary": "Get products by their IDs",
        "description": "Retrieve multiple products by providing their IDs as a comma-separated list",
        "tags": ["Catalog"],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "description": "Comma-separated list of product IDs",
            "schema": {
              "type": "string",
              "example": "507f1f77bcf86cd799439011,507f1f77bcf86cd799439012"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of products matching the provided IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Product" }
                    },
                    "count": { "type": "integer", "example": 2 }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request - missing or invalid product IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/products": {
      "get": {
        "summary": "List products across all brands",
        "parameters": [
          { "name": "brand", "in": "query", "schema": { "type": "string", "example": "ira" } },
          { "name": "category", "in": "query", "schema": { "type": "string" } },
          { "name": "subcategory", "in": "query", "schema": { "type": "string" } },
          { "name": "q", "in": "query", "schema": { "type": "string" } },
          { "name": "min", "in": "query", "schema": { "type": "number" } },
          { "name": "max", "in": "query", "schema": { "type": "number" } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20 } }
        ],
        "responses": { "200": { "description": "Paginated products" } }
      }
    },
    "/api/catalog/product/{idOrSlug}": {
      "get": {
        "summary": "Get a product by Mongo ID or slug",
        "parameters": [
          { "name": "idOrSlug", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": { "200": { "description": "Product detail" }, "404": { "description": "Not found" } }
      }
    },
    "/api/admin/brands": {
      "post": {
        "summary": "Create a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "description": { "type": "string" },
                  "active": { "type": "boolean" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Brand" } } } },
          "409": { "description": "Slug already exists" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{id}": {
      "patch": {
        "summary": "Update a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "description": { "type": "string" },
                  "active": { "type": "boolean" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Brand" } } } },
          "404": { "description": "Brand not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "summary": "Delete a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "204": { "description": "No Content" },
          "404": { "description": "Brand not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories": {
      "post": {
        "summary": "Create category for a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "image": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Category" } } } },
          "404": { "description": "Brand not found" },
          "409": { "description": "Slug already exists for this brand" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories/{id}": {
      "patch": {
        "summary": "Update category for a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "image": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Category" } } } },
          "404": { "description": "Brand or Category not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "summary": "Delete category for a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "204": { "description": "No Content" },
          "404": { "description": "Brand or Category not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories/{categoryId}/subcategories": {
      "post": {
        "summary": "Create subcategory for a category (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "image": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Subcategory" } } } },
          "404": { "description": "Brand or Category not found" },
          "409": { "description": "Slug already exists for this category" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories/{categoryId}/subcategories/{id}": {
      "patch": {
        "summary": "Update subcategory for a category (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "slug": { "type": "string" },
                  "image": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Subcategory" } } } },
          "404": { "description": "Brand/Category/Subcategory not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "summary": "Delete subcategory for a category (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "204": { "description": "No Content" },
          "404": { "description": "Brand/Category/Subcategory not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories/{categoryId}/subcategories/{subcategoryId}/products": {
      "post": {
        "summary": "Create product (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "subcategoryId", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "price"],
                "properties": {
                  "title": { "type": "string" },
                  "slug": { "type": "string" },
                  "description": { "type": "string" },
                  "images": { "type": "array", "items": { "type": "string" } },
                  "price": { "type": "number" },
                  "compareAtPrice": { "type": "number" },
                  "sku": { "type": "string" },
                  "shippingCategory": { "type": "string", "enum": ["artificial-jewellery","earrings","necklaces","bracelets","bangles","rings","clothes","knitted-clothes","textiles","accessories","general"] },
                  "weightKg": { "type": "number" },
                  "dimensionsCm": { "type": "object", "properties": { "length": {"type":"number"}, "breadth": {"type":"number"}, "height": {"type":"number"} } },
                  "hsnCode": { "type": "string" },
                  "gstRate": { "type": "number", "minimum": 0, "maximum": 28 },
                  "productType": { "type": "string", "enum": ["artificial-jewellery","imitation-jewellery","fashion-jewellery","clothing","accessories","textiles"] },
                  "attributes": { 
            "type": "object", 
            "properties": {
              "size": { "type": "array", "items": { "type": "string" } },
              "color": { "type": "array", "items": { "type": "string" } },
              "material": { "type": "string", "enum": ["base-metal","stainless-steel","brass","copper","plastic","resin","glass","wood","cotton","polyester","silk","mixed-material"] },
              "fit": { "type": "string", "enum": ["regular","slim","loose","oversized","fitted"] },
              "styling": { "type": "string" }
            },
            "additionalProperties": true 
          },
                  "stock": { "type": "number" },
                  "lowStockThreshold": { "type": "number" },
                  "isActive": { "type": "boolean" },
                  "status": { "type": "string", "enum": ["active", "draft", "pending_approval", "out_of_stock", "discontinued"] },
                  "vendorId": { "type": "string", "description": "Optional vendor ID. Leave empty for admin-created products." },
                  "tags": { "type": "array", "items": { "type": "string" } },
                  "featured": { "type": "boolean" },
                  "bestseller": { "type": "boolean" },
                  "newArrival": { "type": "boolean" },
                  "onSale": { "type": "boolean" },
                  "metaTitle": { "type": "string" },
                  "metaDescription": { "type": "string" },
                  "metaKeywords": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } } },
          "404": { "description": "Brand/Category/Subcategory not found" },
          "409": { "description": "Slug already exists for this brand" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandId}/categories/{categoryId}/subcategories/{subcategoryId}/products/{id}": {
      "patch": {
        "summary": "Update product (admin)",
        "description": "Performs a partial update. Unspecified fields are preserved. The attributes object is deep-merged (existing keys are kept unless explicitly overwritten). For images and tags, empty arrays are ignored; only non-empty arrays replace existing values. Slug is sanitized and must be unique within the brand.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "subcategoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "slug": { "type": "string" },
                  "description": { "type": "string" },
                  "images": { "type": "array", "items": { "type": "string" } },
                  "price": { "type": "number" },
                  "compareAtPrice": { "type": "number" },
                  "sku": { "type": "string" },
                  "shippingCategory": { "type": "string", "enum": ["artificial-jewellery","earrings","necklaces","bracelets","bangles","rings","clothes","knitted-clothes","textiles","accessories","general"] },
                  "weightKg": { "type": "number" },
                  "dimensionsCm": { "type": "object", "properties": { "length": {"type":"number"}, "breadth": {"type":"number"}, "height": {"type":"number"} } },
                  "hsnCode": { "type": "string" },
                  "gstRate": { "type": "number", "minimum": 0, "maximum": 28 },
                  "productType": { "type": "string", "enum": ["artificial-jewellery","imitation-jewellery","fashion-jewellery","clothing","accessories","textiles"] },
                  "attributes": { 
            "type": "object", 
            "properties": {
              "size": { "type": "array", "items": { "type": "string" } },
              "color": { "type": "array", "items": { "type": "string" } },
              "material": { "type": "string", "enum": ["base-metal","stainless-steel","brass","copper","plastic","resin","glass","wood","cotton","polyester","silk","mixed-material"] },
              "fit": { "type": "string", "enum": ["regular","slim","loose","oversized","fitted"] },
              "styling": { "type": "string" }
            },
            "additionalProperties": true 
          },
                  "stock": { "type": "number" },
                  "lowStockThreshold": { "type": "number" },
                  "isActive": { "type": "boolean" },
                  "status": { "type": "string", "enum": ["active", "draft", "pending_approval", "out_of_stock", "discontinued"] },
                  "vendorId": { "type": "string", "description": "Optional vendor ID. Leave empty for admin-created products." },
                  "tags": { "type": "array", "items": { "type": "string" } },
                  "featured": { "type": "boolean" },
                  "bestseller": { "type": "boolean" },
                  "newArrival": { "type": "boolean" },
                  "onSale": { "type": "boolean" },
                  "metaTitle": { "type": "string" },
                  "metaDescription": { "type": "string" },
                  "metaKeywords": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Product" } } } },
          "404": { "description": "Brand/Category/Subcategory/Product not found" },
          "409": { "description": "Slug already exists for this brand" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "summary": "Delete product (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "categoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "subcategoryId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "204": { "description": "No Content" },
          "404": { "description": "Brand/Category/Subcategory/Product not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandSlug}/products": {
      "get": {
        "summary": "List products for a brand (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } }
        ],
        "responses": { 
          "200": { "description": "Products for the specified brand with populated category and subcategory" }, 
          "404": { "description": "Brand not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandSlug}/categories/{categorySlug}/products": {
      "get": {
        "summary": "List products for a brand category (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "categorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "shirts" } }
        ],
        "responses": { 
          "200": { "description": "Products for the specified brand and category with populated subcategory" }, 
          "404": { "description": "Brand or category not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/brands/{brandSlug}/categories/{categorySlug}/subcategories/{subcategorySlug}/products": {
      "get": {
        "summary": "List products for a brand subcategory (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brandSlug", "in": "path", "required": true, "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "categorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "shirts" } },
          { "name": "subcategorySlug", "in": "path", "required": true, "schema": { "type": "string", "example": "polo" } }
        ],
        "responses": { 
          "200": { "description": "Products for the specified brand, category, and subcategory" }, 
          "404": { "description": "Brand, category, or subcategory not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/products": {
      "get": {
        "summary": "List all products across all brands (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "brand", "in": "query", "schema": { "type": "string", "example": "jerseymise" } },
          { "name": "category", "in": "query", "schema": { "type": "string" } },
          { "name": "subcategory", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": { 
          "200": { "description": "Products with populated brand, category, subcategory, and vendor" }, 
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/products/bulk-upload": {
      "post": {
        "summary": "Bulk upload products from Excel/CSV (admin)",
        "description": "Upload products in bulk using an Excel (.xlsx, .xls) or CSV file. The first row must contain column headers. Column conventions: images, size, color, metaKeywords, and tags accept comma-separated values (e.g., 'https://a.jpg, https://b.jpg'); booleans (featured, bestseller, newArrival, onSale, isActive) accept case-insensitive true/false (TRUE/FALSE/true/false); numeric fields (price, compareAtPrice, weightKg, gstRate, stock, lowStockThreshold, dimensionsLength, dimensionsBreadth, dimensionsHeight) are parsed as numbers; strings are trimmed. Required columns: brandSlug, categorySlug, subcategorySlug, title, price. Optional columns include: description, images, slug, sku, stock, shippingCategory, weightKg, dimensionsLength, dimensionsBreadth, dimensionsHeight, hsnCode, gstRate, productType, size, color, material, fit, styling, tags, featured, bestseller, newArrival, onSale, isActive, status, metaTitle, metaDescription, metaKeywords, vendorId.",
        "tags": ["Admin", "Products"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["productFile"],
                "properties": {
                  "productFile": {
                    "type": "string",
                    "format": "binary",
                    "description": "Excel (.xlsx, .xls) or CSV file with product data"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk upload results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "filename": { "type": "string" },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "total": { "type": "integer", "description": "Total rows processed" },
                        "successful": { "type": "integer", "description": "Number of products successfully created" },
                        "failed": { "type": "integer", "description": "Number of rows that failed" }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "row": { "type": "integer" },
                          "success": { "type": "boolean" },
                          "productId": { "type": "string" },
                          "title": { "type": "string" },
                          "brand": { "type": "string" },
                          "category": { "type": "string" },
                          "subcategory": { "type": "string" }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "row": { "type": "integer" },
                          "error": { "type": "string" },
                          "productData": { "type": "string" },
                          "brandSlug": { "type": "string" },
                          "categorySlug": { "type": "string" },
                          "subcategorySlug": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid file, missing required fields)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/api/admin/vendors": {
      "get": {
        "summary": "List all vendors (admin) - simple version",
        "description": "Get a simple list of all vendors with basic information (no pagination or filters)",
        "security": [{ "bearerAuth": [] }],
        "responses": { 
          "200": { "description": "Simple list of vendors with basic data" }, 
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/vendors/detailed": {
      "get": {
        "summary": "List all vendors (admin) - detailed version",
        "description": "Get a detailed, paginated list of vendors with filters and full information",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "status", "in": "query", "schema": { "type": "string", "enum": ["pending", "approved", "suspended"] } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20 } }
        ],
        "responses": { 
          "200": { "description": "Paginated list of vendors with populated user data" }, 
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/admin/vendors/{id}": {
      "get": {
        "summary": "Get vendor details by ID (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": { 
          "200": { "description": "Vendor details with populated user data" }, 
          "404": { "description": "Vendor not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "patch": {
        "summary": "Update vendor (admin)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": { "type": "string", "enum": ["pending", "approved", "suspended"] },
                  "displayName": { "type": "string" },
                  "businessName": { "type": "string" },
                  "phone": { "type": "string" },
                  "gstNumber": { "type": "string" },
                  "address": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": { 
          "200": { "description": "Vendor updated successfully" }, 
          "400": { "description": "Invalid status value or no fields to update" },
          "404": { "description": "Vendor not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/reviews": {
      "post": {
        "summary": "Create a new review",
        "description": "Submit a new review for a product. Requires authentication.",
        "tags": ["Reviews"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["product", "rating", "comment"],
                "properties": {
                  "product": {
                    "type": "string",
                    "format": "objectId",
                    "description": "ID of the product being reviewed",
                    "example": "507f1f77bcf86cd799439011"
                  },
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "description": "Rating from 1 to 5 stars"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Review comment (max 1000 characters)",
                    "maxLength": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or user has already reviewed this product"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reviews/product/{productId}": {
      "get": {
        "summary": "Get all reviews for a product",
        "description": "Retrieve all approved reviews for a specific product",
        "tags": ["Reviews"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "ID of the product to get reviews for",
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reviews for the product",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Review"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "summary": "Create a review by productId",
        "description": "Submit a new review for a product using productId in the path.",
        "tags": ["Reviews"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "ID of the product to review",
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["rating", "comment"],
                "properties": {
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "description": "Rating from 1 to 5 stars"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Review comment (max 1000 characters)",
                    "maxLength": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or user has already reviewed this product"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/reviews/{id}": {
      "get": {
        "summary": "Get review by ID",
        "description": "Retrieve a specific review by its ID",
        "tags": ["Reviews"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the review to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/wishlist": {
      "get": {
        "summary": "List current user's wishlist",
        "description": "Returns all wishlist items for the authenticated user (most recent first)",
        "tags": ["Wishlist"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Array of wishlist items",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WishlistItem" } }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "summary": "Add product to wishlist",
        "description": "Add a product to the authenticated user's wishlist.",
        "tags": ["Wishlist"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["product"],
                "properties": {
                  "product": { "type": "string", "description": "Product ID (Mongo ObjectId)", "example": "507f1f77bcf86cd799439011" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Added to wishlist" },
          "200": { "description": "Already in wishlist (idempotent)" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Product not found" }
        }
      }
    },
    "/api/wishlist/{productId}": {
      "post": {
        "summary": "Add product to wishlist (by path)",
        "description": "Add a product to the authenticated user's wishlist by providing the product ID in the URL path.",
        "tags": ["Wishlist"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product ID (Mongo ObjectId)",
            "schema": { "type": "string", "format": "objectId", "example": "507f1f77bcf86cd799439011" }
          }
        ],
        "responses": {
          "201": { "description": "Added to wishlist", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WishlistItem" } } } },
          "200": { "description": "Already in wishlist (idempotent)", "content": { "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" }, "item": { "$ref": "#/components/schemas/WishlistItem" } } } } } },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Product not found" }
        }
      },
      "delete": {
        "summary": "Remove product from wishlist",
        "description": "Remove the specified product from the authenticated user's wishlist.",
        "tags": ["Wishlist"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "Product ID (Mongo ObjectId)",
            "schema": { "type": "string", "format": "objectId", "example": "507f1f77bcf86cd799439011" }
          }
        ],
        "responses": {
          "204": { "description": "Removed from wishlist (No Content)" },
          "404": { "description": "Item not found in wishlist" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/orders": {
      "get": {
        "summary": "List all orders (admin)",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Array of orders",
            "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Order" } } } }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "post": {
        "summary": "Create a new order",
        "description": "Create an order from items and either a saved address (addressId) or a full shipping address for the authenticated user",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["items", "customerDetails", "sellerDetails"],
                "properties": {
                  "items": { "type": "array", "items": { "$ref": "#/components/schemas/OrderItem" } },
                  "addressId": { "type": "string", "description": "Use a saved user address for shipping" },
                  "billingAddressId": { "type": "string", "description": "Use a saved user address for billing" },
                  "shippingAddress": { "$ref": "#/components/schemas/OrderAddress" },
                  "billingAddress": { "$ref": "#/components/schemas/OrderAddress" },
                  "customerDetails": { "$ref": "#/components/schemas/CustomerDetails" },
                  "sellerDetails": { "$ref": "#/components/schemas/SellerDetails" },
                  "paymentMethod": { "type": "string", "enum": ["online", "cod", "wallet"], "default": "online" },
                  "shippingPrice": { "type": "number", "minimum": 0 },
                  "taxPrice": { "type": "number", "minimum": 0 },
                  "orderNotes": { "type": "string" },
                  "specialInstructions": { "type": "string" },
                  "insurance": { "type": "boolean" }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Order created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } } },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Product not found" }
        }
      }
    },
    "/api/orders/mine": {
      "get": {
        "summary": "List authenticated user's orders",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Array of user's orders", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Order" } } } } },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/api/orders/{id}": {
      "get": {
        "summary": "Get order by ID (owner or admin)",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "description": "Order details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/api/orders/{id}/pay": {
      "patch": {
        "summary": "Mark an order as paid",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": {
          "required": true,
          "content": { 
            "application/json": { 
              "schema": { 
                "$ref": "#/components/schemas/RazorpayDetails" 
              } 
            } 
          }
        },
        "responses": {
          "200": { "description": "Order updated to paid", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } } },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/api/orders/{id}/ship": {
      "post": {
        "summary": "Set shipment details (admin)",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ShipmentDetails" }
            }
          }
        },
        "responses": {
          "200": { "description": "Shipment details set", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } } },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/api/orders/{id}/tracking": {
      "get": {
        "summary": "Get advanced tracking for a specific order",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "description": "Tracking details", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": { "type": "boolean" }, "tracking": { "type": "object", "properties": { "orderNumber": { "type": "string" }, "awbNumber": { "type": "string" }, "currentStatus": { "type": "string" }, "trackingHistory": { "type": "array", "items": { "$ref": "#/components/schemas/TrackingEvent" } } } } } } } } },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/api/orders/{id}/cancel-shipment": {
      "post": {
        "summary": "Cancel shipment for an order (owner or admin)",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": { "required": false, "content": { "application/json": { "schema": { "type": "object", "properties": { "reason": { "type": "string" } } } } } },
        "responses": {
          "200": { "description": "Shipment cancelled", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": { "type": "boolean" }, "message": { "type": "string" } } } } } },
          "400": { "description": "No shipment to cancel" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/api/orders/{id}/generate-label": {
      "post": {
        "summary": "Generate shipping labels (admin)",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "description": "Labels generated", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": { "type": "boolean" }, "labels": { "$ref": "#/components/schemas/ShippingLabel" } } } } } },
          "400": { "description": "No AWB number found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/api/orders/{id}/cancel": {
      "post": {
        "summary": "Cancel an order (owner or admin)",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": {
          "required": false,
          "content": { "application/json": { "schema": { "type": "object", "properties": { "reason": { "type": "string" } } } } }
        },
        "responses": {
          "200": { "description": "Order cancelled", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Order" } } } },
          "400": { "description": "Cannot cancel in current status" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/api/orders/{id}/status": {
      "patch": {
        "summary": "Update order status (admin)",
        "tags": ["Orders"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "object", "required": ["status"], "properties": { "status": { "type": "string", "enum": ["pending", "confirmed", "paid", "processing", "shipped", "in_transit", "delivered", "cancelled"] } } } } }
        }
      }
    },
    "/api/orders/payment/initiate": {
      "post": {
        "summary": "Initiate payment for a new order",
        "description": "Creates an order record and a Razorpay order, returning the Razorpay order ID and key for client checkout.",
        "tags": ["Orders", "Payments"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentInitiateRequest" }
            }
          }
        },
        "responses": {
          "200": { "description": "Payment initiated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaymentInitiateResponse" } } } },
          "400": { "description": "Validation error" },
          "500": { "description": "Failed to initiate payment" }
        }
      }
    },
    "/api/orders/payment/confirm": {
      "post": {
        "summary": "Confirm payment (Razorpay signature verification)",
        "description": "Verifies Razorpay signature and marks the corresponding order as paid. On success, the system triggers automatic shipment creation via Shipyaari.",
        "tags": ["Orders", "Payments"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/PaymentConfirmRequest" } }
          }
        },
        "responses": {
          "200": { "description": "Payment confirmed", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": { "type": "boolean" }, "message": { "type": "string" }, "orderId": { "type": "string" }, "orderNumber": { "type": "string" }, "paymentStatus": { "type": "string" }, "orderStatus": { "type": "string" } } } } } },
          "400": { "description": "Payment verification failed - Invalid signature" },
          "404": { "description": "Order not found or access denied" },
          "500": { "description": "Payment confirmation failed" }
        }
      }
    },
    "/api/webhook/razorpay": {
      "post": {
        "summary": "Razorpay webhook",
        "description": "Consumes Razorpay payment events. Uses raw request body for HMAC verification against the webhook secret. On payment.captured, the system marks the order as paid and triggers automatic shipment creation via Shipyaari.",
        "tags": ["Webhooks", "Payments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event": { "type": "string", "example": "payment.captured" },
                  "payload": { "type": "object" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Processed" },
          "400": { "description": "Invalid signature or bad request" },
          "500": { "description": "Processing error" }
        }
      }
    },
    "/api/orders/track/{orderNumber}": {
      "get": {
        "summary": "Public order tracking by order number",
        "tags": ["Orders"],
        "parameters": [ { "name": "orderNumber", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "description": "Tracking info", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PublicOrderTrackingResponse" } } } },
          "404": { "description": "Order not found" },
          "500": { "description": "Failed to track order" }
        }
      }
    },
    "/api/addresses": {
      "get": {
        "summary": "List all addresses for the authenticated user",
        "tags": ["Addresses"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Array of addresses", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/OrderAddress" } } } } },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "summary": "Create a new address for the authenticated user",
        "tags": ["Addresses"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderAddress" } } } },
        "responses": {
          "201": { "description": "Address created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderAddress" } } } },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/api/addresses/{id}": {
      "put": {
        "summary": "Update address by ID",
        "tags": ["Addresses"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderAddress" } } } },
        "responses": {
          "200": { "description": "Address updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderAddress" } } } },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Address not found" }
        }
      },
      "delete": {
        "summary": "Delete address by ID",
        "tags": ["Addresses"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "204": { "description": "Address deleted (No Content)" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Address not found" }
        }
      }
    },
    "/api/addresses/{id}/set-default": {
      "patch": {
        "summary": "Set default address by ID",
        "tags": ["Addresses"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "description": "Default address set", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrderAddress" } } } },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Address not found" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RazorpayDetails": {
        "type": "object",
        "properties": {
          "razorpayOrderId": { "type": "string" },
          "razorpayPaymentId": { "type": "string" },
          "razorpaySignature": { "type": "string" },
          "paymentStatus": { "type": "string", "enum": ["pending", "authorized", "captured", "failed"], "default": "captured" },
          "paymentMethod": { "type": "string", "enum": ["online", "cod", "wallet"], "default": "online" }
        }
      },
      "CategoryWithSubcategories": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "description": "Category ID" },
          "name": { "type": "string", "description": "Category name" },
          "slug": { "type": "string", "description": "URL-friendly category identifier" },
          "image": { "type": "string", "description": "URL to category image", "nullable": true },
          "subcategories": {
            "type": "array",
            "description": "List of subcategories belonging to this category",
            "items": { "$ref": "#/components/schemas/Subcategory" }
          }
        }
      },
      "Subcategory": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "description": "Subcategory ID" },
          "brandId": { "type": "string", "nullable": true },
          "categoryId": { "type": "string", "nullable": true },
          "name": { "type": "string", "description": "Subcategory name" },
          "slug": { "type": "string", "description": "URL-friendly subcategory identifier" },
          "image": { "type": "string", "description": "URL to subcategory image", "nullable": true },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": false },
          "message": { "type": "string", "description": "Error message" }
        }
      },
      "GeocodeAddressInput": {
        "type": "object",
        "required": ["addressLine1", "city", "state", "postalCode"],
        "properties": {
          "addressLine1": { "type": "string", "description": "Primary street address" },
          "addressLine2": { "type": "string", "description": "Additional address info", "nullable": true },
          "city": { "type": "string" },
          "state": { "type": "string" },
          "postalCode": { "type": "string" },
          "country": { "type": "string", "default": "India" }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "description": "Unique product identifier" },
          "brandId": { "$ref": "#/components/schemas/PopulatedBrand" },
          "categoryId": { "$ref": "#/components/schemas/PopulatedCategory" },
          "subcategoryId": { "$ref": "#/components/schemas/PopulatedSubcategory" },
          "title": { "type": "string" },
          "slug": { "type": "string" },
          "description": { "type": "string" },
          "images": { "type": "array", "items": { "type": "string" } },
          "price": { "type": "number" },
          "compareAtPrice": { "type": "number" },
          "sku": { "type": "string", "description": "Stock keeping unit" },
          "shippingCategory": { 
            "type": "string", 
            "description": "Category for shipping rules",
            "enum": [
              "artificial-jewellery",
              "earrings",
              "necklaces",
              "bracelets",
              "bangles",
              "rings",
              "clothes",
              "knitted-clothes",
              "textiles",
              "accessories",
              "general"
            ]
          },
          "weightKg": { "type": "number", "description": "Weight in kilograms" },
          "dimensionsCm": {
            "type": "object",
            "properties": {
              "length": { "type": "number" },
              "breadth": { "type": "number" },
              "height": { "type": "number" }
            }
          },
          "hsnCode": { "type": "string", "description": "HSN code for taxation" },
          "gstRate": { "type": "number", "minimum": 0, "maximum": 28 },
          "productType": {
            "type": "string",
            "enum": [
              "artificial-jewellery",
              "imitation-jewellery",
              "fashion-jewellery",
              "clothing",
              "accessories",
              "textiles"
            ]
          },
          "attributes": { 
            "type": "object", 
            "properties": {
              "size": { "type": "array", "items": { "type": "string" } },
              "color": { "type": "array", "items": { "type": "string" } },
              "material": { "type": "string", "enum": ["base-metal","stainless-steel","brass","copper","plastic","resin","glass","wood","cotton","polyester","silk","mixed-material"] },
              "fit": { "type": "string", "enum": ["regular","slim","loose","oversized","fitted"] },
              "styling": { "type": "string" }
            },
            "additionalProperties": true 
          },
          "stock": { "type": "number" },
          "lowStockThreshold": { "type": "number" },
          "isActive": { "type": "boolean" },
          "status": { "type": "string", "enum": ["active", "draft", "pending_approval", "out_of_stock", "discontinued"] },
          "vendorId": { "$ref": "#/components/schemas/PopulatedVendor" },
          "tags": { "type": "array", "items": { "type": "string" } },
          "featured": { "type": "boolean", "default": false },
          "bestseller": { "type": "boolean", "default": false },
          "newArrival": { "type": "boolean", "default": false },
          "onSale": { "type": "boolean", "default": false },
          "rating": { "type": "number", "minimum": 0, "maximum": 5 },
          "numReviews": { "type": "number" },
          "totalSales": { "type": "number" },
          "viewCount": { "type": "number" },
          "metaTitle": { "type": "string" },
          "metaDescription": { "type": "string" },
          "metaKeywords": { "type": "array", "items": { "type": "string" } },
          "taxAmount": { "type": "number", "description": "Computed: price * gstRate / 100" },
          "priceIncludingTax": { "type": "number" },
          "inStock": { "type": "boolean" },
          "isLowStock": { "type": "boolean" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      },
      "PopulatedBrand": {
        "type": "object",
        "properties": { "_id": { "type": "string" }, "name": { "type": "string" }, "slug": { "type": "string" } }
      },
      "PopulatedCategory": {
        "type": "object",
        "properties": { "_id": { "type": "string" }, "name": { "type": "string" }, "slug": { "type": "string" } }
      },
      "PopulatedSubcategory": {
        "type": "object",
        "properties": { "_id": { "type": "string" }, "name": { "type": "string" }, "slug": { "type": "string" } }
      },
      "PopulatedVendor": {
        "type": "object",
        "properties": { "_id": { "type": "string" }, "name": { "type": "string" }, "email": { "type": "string" } }
      },
      
      "Category": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "brandId": { "type": "string" },
          "name": { "type": "string" },
          "slug": { "type": "string" },
          "image": { "type": "string" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      },
      "Brand": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "name": { "type": "string" },
          "slug": { "type": "string" },
          "description": { "type": "string" },
          "active": { "type": "boolean" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      },
      "TokenOnly": { "type": "object", "properties": { "token": { "type": "string" } } },
      "User": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "name": { "type": "string" },
          "email": { "type": "string" },
          "role": { "type": "string", "enum": ["customer", "vendor", "admin"] },
          "isActive": { "type": "boolean" },
          "phone": { "type": "string" },
          "address": { "type": "string" },
          "googleId": { "type": "string", "description": "Google OAuth ID (only for Google users)" },
          "authProvider": { "type": "string", "enum": ["local", "google"], "description": "Authentication method used" },
          "avatar": { "type": "string", "description": "Profile picture URL (from Google or custom)" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "Vendor": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "userId": { "$ref": "#/components/schemas/User" },
          "displayName": { "type": "string" },
          "businessName": { "type": "string" },
          "status": { "type": "string", "enum": ["pending", "approved", "suspended"] },
          "phone": { "type": "string" },
          "gstNumber": { "type": "string" },
          "address": { "type": "string" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" }
        }
      },
      "AuthResponse": { "type": "object", "properties": { "token": { "type": "string" }, "user": { "$ref": "#/components/schemas/User" } } },
      "VendorAuthResponse": { "type": "object", "properties": { "token": { "type": "string" }, "user": { "$ref": "#/components/schemas/User" }, "vendor": { "$ref": "#/components/schemas/Vendor" } } },
      "Pagination": { "type": "object", "properties": { "page": { "type": "integer" }, "pages": { "type": "integer" }, "total": { "type": "integer" } } },
      "Review": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "product": { "type": "string" },
          "user": { "type": "object", "properties": { "_id": { "type": "string" }, "name": { "type": "string" }, "email": { "type": "string" } } },
          "rating": { "type": "integer", "minimum": 1, "maximum": 5 },
          "comment": { "type": "string" },
          "status": { "type": "string", "enum": ["pending", "approved", "rejected"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "WishlistItem": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "user": { "type": "string" },
          "product": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "user": { "type": "string" },
          "product": {
            "oneOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/Product" }
            ]
          },
          "quantity": { "type": "integer", "minimum": 1 },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "product": { "type": "string", "description": "Product ID" },
          "title": { "type": "string" },
          "image": { "type": "string", "nullable": true },
          "price": { "type": "number", "minimum": 0 },
          "quantity": { "type": "integer", "minimum": 1 }
        }
      },
      "OrderAddress": {
        "type": "object",
        "required": ["fullName", "addressLine1", "city", "state", "postalCode", "country", "phone"],
        "properties": {
          "fullName": { "type": "string" },
          "addressLine1": { "type": "string" },
          "addressLine2": { "type": "string" },
          "city": { "type": "string" },
          "state": { "type": "string" },
          "postalCode": { "type": "string" },
          "country": { "type": "string", "example": "India" },
          "phone": { "type": "string" },
          "latitude": { "type": "string" },
          "longitude": { "type": "string" },
          "landmark": { "type": "string" }
        }
      },
      "ShipmentDetails": {
        "type": "object",
        "properties": {
          "shipyaariOrderId": { "type": "string" },
          "awbNumber": { "type": "string" },
          "courierPartner": { "type": "string" },
          "trackingUrl": { "type": "string" },
          "shipmentStatus": { "type": "string", "enum": ["pending", "processing", "shipped", "in_transit", "out_for_delivery", "delivered", "failed", "cancelled"] },
          "estimatedDeliveryDate": { "type": "string", "format": "date-time" },
          "actualDeliveryDate": { "type": "string", "format": "date-time" },
          "shipmentError": { "type": "string" },
          "trackingHistory": { "type": "array", "items": { "$ref": "#/components/schemas/TrackingEvent" } },
          "shippingLabel": { "$ref": "#/components/schemas/ShippingLabel" },
          "cancellation": { "$ref": "#/components/schemas/ShipmentCancellation" },
          "lastTrackingUpdate": { "$ref": "#/components/schemas/TrackingEvent" }
        }
      },
      "TrackingEvent": {
        "type": "object",
        "properties": {
          "status": { "type": "string" },
          "location": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "description": { "type": "string" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "ShippingLabel": {
        "type": "object",
        "properties": {
          "labelUrl": { "type": "string" },
          "invoiceUrl": { "type": "string" },
          "manifestUrl": { "type": "string" },
          "generatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "ShipmentCancellation": {
        "type": "object",
        "properties": {
          "isCancelled": { "type": "boolean" },
          "cancelledAt": { "type": "string", "format": "date-time" },
          "cancelReason": { "type": "string" },
          "cancelledBy": { "type": "string", "enum": ["customer", "admin", "system"] }
        }
      },
      "CustomerDetails": {
        "type": "object",
        "required": ["name", "email", "mobile"],
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "mobile": { "type": "string" }
        }
      },
      "SellerDetails": {
        "type": "object",
        "properties": {
          "address": {
            "type": "object",
            "properties": {
              "fullAddress": { "type": "string" },
              "pincode": { "type": "integer" },
              "city": { "type": "string" },
              "state": { "type": "string" },
              "country": { "type": "string", "example": "India" },
              "latitude": { "type": "string" },
              "longitude": { "type": "string" }
            }
          },
          "contact": {
            "type": "object",
            "properties": {
              "name": { "type": "string" },
              "mobile": { "type": "integer" },
              "alternateMobile": { "type": "integer" }
            }
          }
        }
      },
      "PaymentInitiateRequest": {
        "type": "object",
        "required": ["items", "customerDetails", "shippingAddress"],
        "properties": {
          "items": { "type": "array", "items": { "$ref": "#/components/schemas/OrderItem" } },
          "customerDetails": { "$ref": "#/components/schemas/CustomerDetails" },
          "shippingAddress": { "$ref": "#/components/schemas/OrderAddress" },
          "billingAddress": { "$ref": "#/components/schemas/OrderAddress" },
          "paymentMethod": { "type": "string", "enum": ["online", "cod", "wallet"], "default": "online" }
        }
      },
      "PaymentInitiateResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "message": { "type": "string" },
          "orderId": { "type": "string" },
          "orderNumber": { "type": "string" },
          "razorpayOrderId": { "type": "string" },
          "razorpayKeyId": { "type": "string" },
          "amount": { "type": "integer", "description": "Amount in paise" },
          "currency": { "type": "string", "example": "INR" },
          "customerDetails": { "$ref": "#/components/schemas/CustomerDetails" }
        }
      },
      "PaymentConfirmRequest": {
        "type": "object",
        "required": ["razorpay_order_id", "razorpay_payment_id", "razorpay_signature"],
        "properties": {
          "razorpay_order_id": { "type": "string" },
          "razorpay_payment_id": { "type": "string" },
          "razorpay_signature": { "type": "string" }
        }
      },
      "PublicOrderTrackingResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "order": {
            "type": "object",
            "properties": {
              "orderNumber": { "type": "string" },
              "orderId": { "type": "string" },
              "status": { "type": "string" },
              "paymentStatus": { "type": "string" },
              "shipmentStatus": { "type": "string" },
              "awbNumber": { "type": "string" },
              "courierPartner": { "type": "string" },
              "trackingUrl": { "type": "string" },
              "timestamps": {
                "type": "object",
                "properties": {
                  "orderDate": { "type": "string", "format": "date-time" },
                  "paidAt": { "type": "string", "format": "date-time", "nullable": true },
                  "shippedAt": { "type": "string", "format": "date-time", "nullable": true },
                  "deliveredAt": { "type": "string", "format": "date-time", "nullable": true }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } }
  }
}
